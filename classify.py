"""
Description:
    Module that classifies a statement as possessing positive, neutral, or negative sentiment.
"""
#Dependencies
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
import pandas as pd

def assign_sentiment(score):
    """Assigns a sentiment to a score. The score is generated by the vaderSentiment analyzer and the thresholds were chosen because they are the typical values as noted in the package's README.

    Args:
        score (float): number generated by SentimentIntensityAnalyzer

    Returns:
        string: Positive, neutral, or negative depending on the value of score. 
    """
    if score >= 0.05:
        sentiment = 'Positive'
    elif (score < 0.05) and (score > -0.05):
        sentiment = 'Neutral'
    else:
        sentiment = 'Negative'
    return sentiment

def classify(data, target_column_index):
    """Classifies a list of sentences as positive, neutral, or negative, and adds that to a dataframe with the sentence in it.

    Args:
        data (DataFrame): DataFrame with sentences that need sentiment extracted.
        target_column_index (int): The index of the column that has the sentences in it.

    Returns:
        DataFrame: argument data, with Sentiment column appended
    """
    
    analyzer = SentimentIntensityAnalyzer()
    df = data
    sentences = df.iloc[:, target_column_index]
    sentiments = []

    for sentence in sentences:
        score = analyzer.polarity_scores(sentence)['compound']
        sentiments.append( assign_sentiment(score) )
    df['Sentiment'] = sentiments

    return df